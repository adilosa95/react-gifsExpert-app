{"version":3,"sources":["components/AddCategory.js","components/GifGirdItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","gifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","toString","length","cats","type","value","onChange","target","GifGirdItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAwB/C,OAEI,0BAEAC,SAnBiB,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,WAAWC,OAAS,IAG/BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEvCN,EAAc,OAWlB,2BACQO,KAAK,OACLC,MAAQT,EAERU,SA7Bc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,YCRlBG,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAIrC,OAFAC,QAAQC,IAAIJ,EAAIC,EAAQC,GAGpB,yBAAKG,UAAU,0CACX,yBAAKC,IAAMJ,EAAMK,IAAMN,IACvB,2BAAKA,K,uBCNJO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbR,EAFa,iDAEmCS,UAAUF,GAF7C,+DAGAG,MAAOV,GAHP,cAGbW,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAI1CC,QAAQC,IAAKY,GAdM,kBAgBZA,GAhBY,4CAAH,sDCCPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAc,IAAD,EAEbvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KA2BvC,OAjBAC,qBAAW,WACNjB,EAASC,GACJiB,MAAM,SAAAC,GAEJC,YAAW,WAEPJ,EAAS,CACLT,KAAMY,EACNL,SAAS,MAGd,UAIZ,CAAEb,IAEEc,EDxB0BM,CAAcpB,GAAlCU,EAHwB,EAG7BJ,KAAcO,EAHe,EAGfA,QAGtB,OACI,oCACA,wBAAIjB,UAAU,qCAAqCI,GAEjDa,GAAW,uBAAGjB,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAEHc,EAAOF,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIY,IAAKZ,EAAIlB,IAEJkB,UElBpBa,EAAe,WAAK,MAGO7C,mBAAS,CAAC,cAHjB,mBAGtB8C,EAHsB,KAGV/C,EAHU,KAW7B,OACI,oCACC,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAKO+C,EAAWf,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACIqB,IAAMrB,EACNA,SAAWA,UCtBnCwB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.767e2750.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ( { setCategories } ) =>{\n    \n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) =>{\n        /*elemento que se puede editar*/\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) =>{\n        //Asi ya no se refresca\n        e.preventDefault();\n    \n        if( inputValue.toString().length > 2){\n            //Añadimos el inputvalue a la lista del setCategories\n            //Spread la pnueva y despues las demas\n            setCategories( cats => [inputValue, ...cats])\n            //Dejamos despues de ser agregado vacío\n            setInputValue('')\n        }\n\n        \n    }\n\n    return(\n\n        <form \n        /*Acción al presionar intro*/\n        onSubmit={ handleSubmit }>\n        <input\n                type='text'\n                value={ inputValue }\n                /*Con ello podremos editar el valor del input*/\n                onChange={ handleInputChange }\n            />\n        </form>\n    \n    )\n} \n\n/**\n * Requerimos obligatoriamente el setCategories\n */\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGirdItem = ({ id, title, url }) => {\n\n    console.log(id, title , url)\n\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","\n\n\nexport const getGifs = async( category ) =>{\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=1XSLhq1eTy6cKardbeRY7SevfYwnufXi`\n    const resp = await fetch( url);\n    const { data } = await resp.json();\n    \n    const gifs = data.map( img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    console.log( gifs );\n    //Insertamos el array que nos devuelve la api\n    return gifs;\n}","import React from 'react'\nimport { GifGirdItem } from './GifGirdItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ( {category} ) => {\n\n\n    const { data:images , loading} = useFetchGifs( category ); \n\n    \n    return (\n        <>\n        <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\n        { loading && <p className='animate__animated animate__flash'>Loading</p>}\n\n        <div className='card-grid'>\n                {\n                    images.map( img =>(\n                        <GifGirdItem \n                            key={img.id}\n                            /* mandamos las propiedas del img como una independiente*/\n                            { ...img }\n                        />\n                    ))\n                }\n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) =>{\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    // /**\n    //  * Con este hook lo que hacemos es la carga de varias veces, solo de este componente, sin afectar a ninguno más\n    //  * Tamibien se le pueden pasar unas propiedaddes\n    //  */\n    useEffect( () => {\n         getGifs( category )\n             .then( imgs =>{\n\n                setTimeout(() => {\n\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n\n                }, 3000);\n\n            } )\n\n    }, [ category ])\n\n    return state; //{ data: [] ,loading: true}\n}","import React,{ useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () =>{\n\n    //const categories =['One Punch','Samuray Jack','Rick and Morty'];\n    const [categories, setCategories] = useState(['One Punch'])\n\n    /*const handleAdd = () =>{\n        //Añadir con el operador spread ...\n        //1º Forma setCategoires([...categories , 'Hunter x Hunter'])\n        //2º Forma\n        setCategories( cats => [...cats, 'Hunter x Hunter'])\n    }*/\n    return(\n        <>\n         <h2>GifExpertApp</h2>\n         <AddCategory setCategories={ setCategories }/>\n         <hr />   \n\n         <ol>\n            { \n                /*\n                *Renderiza una categoria por cada una que se añada en el input\n                */\n                categories.map( category => (\n                    <GifGrid\n                        key={ category }\n                        category={ category }\n                    />\n                ))\n            }\n         </ol>\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport { GifExpertApp } from './gifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />, \n  document.getElementById('root')\n);"],"sourceRoot":""}